#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse

import os
import sys
import subprocess
import re
import time
import sqlite3


class Colors(object):
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    BHEADER = '\033[1;95m'
    BOKBLUE = '\033[1;94m'
    BOKGREEN = '\033[1;92m'
    BWARNING = '\033[1;93m'
    BFAIL = '\033[1;91m'


def extrac_duration_from_info(info):
    pattern = re.compile(r"[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{2}")
    __duration = pattern.findall(info)
    if __duration:
        duration = __duration[0].split(":")
        hour = int(duration[0])
        minute = int(duration[1])
        second = float(duration[2])
        return float(hour * 3600) + float(minute * 60) + second


def format_time(seconds):
    hours = 0
    if seconds >= 3600:
        hours = int(seconds / 3600)
    seconds -= (hours * 3600)
    minutes = int(seconds / 60)
    seconds -= (minutes * 60)
    return "{}{:02d}:{:02d}:{:02d}{}".format(Colors.BOKGREEN, hours, minutes, seconds, Colors.ENDC)


def play_list_db():
    dir_path = os.path.join(os.path.expanduser("~"), ".play_folder", "db")
    if not os.path.exists(dir_path):
        diretorio = os.path.dirname(os.path.realpath(__file__))
        dir_path = os.path.join(diretorio, "db")

    con = None
    try:
        con = sqlite3.connect(os.path.join(dir_path, "play_list.db"))
        return con
    except sqlite3.Error, ex:
        if con:
            con.rollback()
            con.close()
        print "{}CONNECTION: {}{}".format(Colors.BFAIL, ex, Colors.ENDC)
        return None


def create_play_list(mp3_files_list):
    con = play_list_db()
    try:
        cursor = con.cursor()
        inserts = []
        cursor.executescript("DELETE FROM musics;")
        for entry in mp3_files_list:
            insert = "INSERT INTO musics(path, played) VALUES ('{}', 0);".format(entry)
            inserts.append(insert)
        cursor.executescript('\n'.join(inserts))
        con.commit()
    except sqlite3.Error, ex:
        print "{}CREATE PLAYLIST: {}{}".format(Colors.BFAIL, ex, Colors.ENDC)
        con.rollback()
    finally:
        con.close()


def get_playable_list():
    con = play_list_db()
    try:
        with con:
            con.row_factory = sqlite3.Row
            cursor = con.cursor()
            cursor.execute("SELECT * FROM musics WHERE played = ?;", (0, ))
            return cursor.fetchall()
    except sqlite3.Error, ex:
        con.rollback()
        print "{}GET PLAYLIST: {}{}".format(Colors.BFAIL, ex, Colors.ENDC)
        return []
    finally:
        con.close()


def set_music_as_played(music_id):
    con = play_list_db()
    try:
        with con:
            cursor = con.cursor()
            cursor.execute("UPDATE musics SET played = ? WHERE id = ?;", (1, music_id))
            con.commit()
    except sqlite3.Error, ex:
        con.rollback()
        print "{}UPDATE MUSIC: {}{}".format(Colors.BFAIL, ex, Colors.ENDC)
    finally:
        con.close()

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--dir", help="Folder path with the mp3 files")
parser.add_argument("-a", "--all", help="Play all folder and delete play list in database", action="store_true")

if __name__ == "__main__":
    args = parser.parse_args()
    all_files = args.all
    actual_dir = args.dir
    if not actual_dir:
        actual_dir = os.getcwd()

    if all_files:
        mp3_files = [os.path.join(actual_dir, mp3_file) for mp3_file in os.listdir(actual_dir) if mp3_file.endswith(".mp3")]
        mp3_files.sort()
        create_play_list(mp3_files)

    for register in get_playable_list():
        mp3_file = register["path"]
        proc_info = subprocess.check_output(['omxplayer', '-i', mp3_file], stderr=subprocess.STDOUT)
        _duration = extrac_duration_from_info(proc_info)
        current_time = int(_duration)
        print "{}Playing {}{}{}. Duration: {}".format(Colors.HEADER, Colors.BOKBLUE, mp3_file, Colors.HEADER, format_time(current_time))
        play = subprocess.Popen(['omxplayer', mp3_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        do_exit = False
        try:
            while current_time > 0:
                sys.stdout.write("{}Duration: {}   \r".format(Colors.BHEADER, format_time(current_time)))
                sys.stdout.flush()
                current_time -= 1
                time.sleep(1)
        except KeyboardInterrupt:
            do_exit = True
        os.system("killall omxplayer.bin")
        play.terminate()
        set_music_as_played(register["id"])
        if do_exit:
            print "{}Player is closing!{}".format(Colors.BFAIL, Colors.ENDC)
            sys.exit(0)
        print "{}{} ended{}\n".format(Colors.BWARNING, mp3_file, Colors.ENDC)
